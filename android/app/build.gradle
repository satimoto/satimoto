apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: "com.google.protobuf"
apply plugin: "com.google.gms.google-services"
apply plugin: "kotlin-android"

import com.android.build.OutputFile

/*project.ext.react = [
    enableHermes: true,
    deleteDebugFilesForVariant: { false }
]*/

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */

react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
    // codegenDir = file("../node_modules/react-native-codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
 
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
 
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
 
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    flavorDimensions "default"
    namespace "com.satimoto"

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        applicationId "com.satimoto"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 81
        versionName "0.5.1"
        buildConfigField "String", "BREEZ_SDK_API_KEY", project.property('BREEZ_SDK_API_KEY')
        buildConfigField "String", "GREENLIGHT_PARTNER_CERT", project.property('GREENLIGHT_PARTNER_CERT')
        buildConfigField "String", "GREENLIGHT_PARTNER_KEY", project.property('GREENLIGHT_PARTNER_KEY')
        missingDimensionStrategy 'react-native-camera', 'general'
        manifestPlaceholders = [appName: "Satimoto"]
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('SATIMOTO_UPLOAD_STORE_FILE')) {
                storeFile file(SATIMOTO_UPLOAD_STORE_FILE)
                storePassword SATIMOTO_UPLOAD_STORE_PASSWORD
                keyAlias SATIMOTO_UPLOAD_KEY_ALIAS
                keyPassword SATIMOTO_UPLOAD_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            manifestPlaceholders = [buildType: " Debug"]
        }
        release {
            signingConfig signingConfigs.debug
            manifestPlaceholders = [buildType: ""]
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            if (project.hasProperty('SATIMOTO_UPLOAD_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "network"
    productFlavors {
        networkregtest {
            dimension "network"
            applicationIdSuffix ".regtest"
            buildConfigField "String", "API_URI", '"http://10.0.2.2:9000"'
            buildConfigField "String", "NETWORK", '"regtest"'
            buildConfigField "String", "MAPBOX_API_KEY", project.property('MAPBOX_API_KEY')          
            manifestPlaceholders = [network: " Regtest"]
        }
        networktestnet {
            dimension "network"
            applicationIdSuffix ".testnet"
            buildConfigField "String", "API_URI", '"https://api.testnet.satimoto.com"'
            buildConfigField "String", "NETWORK", '"testnet"'
            buildConfigField "String", "MAPBOX_API_KEY", project.property('MAPBOX_API_KEY')          
            manifestPlaceholders = [network: " Testnet"]
        }
        networkmainnet {
            dimension "network"
            buildConfigField "String", "API_URI", '"https://api.satimoto.com"'
            buildConfigField "String", "NETWORK", '"mainnet"'
            buildConfigField "String", "MAPBOX_API_KEY", project.property('MAPBOX_API_KEY')          
            manifestPlaceholders = [network: ""]
        }
    }

    packagingOptions {
        pickFirst "**/armeabi-v7a/libjsc.so"
        pickFirst "**/arm64-v8a/libjsc.so"
        pickFirst "**/x86/libjsc.so"
        pickFirst "**/x86_64/libjsc.so"
        pickFirst "**/armeabi-v7a/libc++_shared.so"
        pickFirst "**/arm64-v8a/libc++_shared.so"
        pickFirst "**/x86/libc++_shared.so"
        pickFirst "**/x86_64/libc++_shared.so"
        pickFirst "**/armeabi-v7a/libbreez_sdk_bindings.so"
        pickFirst "**/arm64-v8a/libbreez_sdk_bindings.so"
        pickFirst "**/x86/libbreez_sdk_bindings.so"
        pickFirst "**/x86_64/libbreez_sdk_bindings.so"
        exclude "META-INF/*"
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:29.1.0')

    implementation project(':breeztech_react-native-breez-sdk')

    implementation("com.github.breez:breez-sdk:0.5.1-rc6") {
        exclude group:"net.java.dev.jna"
    }

    implementation project(':react-native-build-config')

    implementation project(':react-native-secure-storage')

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    implementation "com.facebook.conceal:conceal:1.1.3@aar"

    implementation "com.google.firebase:firebase-messaging"

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    implementation "com.facebook.soloader:soloader:0.10.5+"
 
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    implementation ("com.mapbox.maps:android:10.3.0") {
        exclude group: 'group_name', module: 'module_name'
    }

    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "io.grpc:grpc-stub:1.40.0"
    implementation "io.grpc:grpc-protobuf-lite:1.40.0"

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlin_version}"

    implementation project(path: ':Lndmobile')

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    protobuf files("../../proto/lightning.proto", "../../proto/walletunlocker.proto")
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.13.0"
    }
    generateProtoTasks {
        all()*.builtins {
            java {
                option "lite"
            }
        }
    }
}
